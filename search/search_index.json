{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vivid","text":"<p> Vivid \u2192 A toy web framework made by me for learning purpose. </p>"},{"location":"#installation","title":"Installation","text":"<p>To install Vivid library, open a command line then write things those are below</p> <pre><code>python -m pip install git+https://github.com/NaviTheCoderboi/vivid.git\n</code></pre> <p>If the top command isn't working, try this one</p> <pre><code>python3 -m pip install git+https://github.com/NaviTheCoderboi/vivid.git\n</code></pre>"},{"location":"#start-quickly-by-creating-project","title":"Start quickly by creating project","text":"<p>To create a Vivid project you need to open a command line and type below command</p> <pre><code>python -m vivid init ...\n</code></pre> <p>Note</p> <p>Don't forget to replace ... with your project name</p>"},{"location":"#walkthrough","title":"walkthrough","text":"<p>You can load data on server using this server, make a .py file named same as template file in /server directory. you need to export a load function which returns a response, below is given an example load function</p> <p>for example index.py</p> <pre><code>from vivid.app import Response\n\nasync def load():\n\u00a0 \u00a0 return Response(200,[], { \"name\": \"John\" })\n</code></pre> <p>Note</p> <p>You have to use jinja3.x syntax for templating, Here's jinja docs for more information.</p>"},{"location":"#example-template","title":"Example template","text":"<p>Here is an example template index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;title&gt;Document&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"../styles/index.css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello {{ name }}&lt;/h1&gt;\n        &lt;script src=\"../scripts/index.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"#contributing","title":"contributing","text":"<p>Everyone is free to fork and contribute to this project, hope this framework becomes a success!</p> <p>Made with \u2665 by NaviTheCoderboi</p>"},{"location":"api_reference/app/","title":"App","text":"<p>App class to create a vivid app</p> Arguments <p>pages: Path | str     Path to pages directory server: Path | str     Path to server directory static: Path | str     Path to static directory scripts: Path | str     Path to scripts directory styles: Path | str     Path to styles directory type: typing.Literal[\"ssr\"] | typing.Literal[\"ssg\"]     Type of the app</p> <p>Attributes:</p> Name Type Description <code>pages</code> <code>Path</code> <p>Path to pages directory</p> <code>server</code> <code>Path</code> <p>Path to server directory</p> <code>static</code> <code>Path</code> <p>Path to static directory</p> <code>scripts</code> <code>Path</code> <p>Path to scripts directory</p> <code>styles</code> <code>Path</code> <p>Path to styles directory</p> <code>type</code> <code>Literal['ssr'] | Literal['ssg']</code> <p>Type of the app</p> <code>http</code> <code>SSR | SSG | None</code> <p>HTTP instance of the app</p> Source code in <code>vivid/app.py</code> <pre><code>class App:\n    \"\"\"\n    App class to create a vivid app\n\n    Arguments\n    ---------\n    pages: Path | str\n        Path to pages directory\n    server: Path | str\n        Path to server directory\n    static: Path | str\n        Path to static directory\n    scripts: Path | str\n        Path to scripts directory\n    styles: Path | str\n        Path to styles directory\n    type: typing.Literal[\"ssr\"] | typing.Literal[\"ssg\"]\n        Type of the app\n\n    Attributes\n    ----------\n    pages: Path\n        Path to pages directory\n    server: Path\n        Path to server directory\n    static: Path\n        Path to static directory\n    scripts: Path\n        Path to scripts directory\n    styles: Path\n        Path to styles directory\n    type: typing.Literal[\"ssr\"] | typing.Literal[\"ssg\"]\n        Type of the app\n    http: SSR | SSG | None\n        HTTP instance of the app\n    \"\"\"\n\n    def __init__(\n        self,\n        pages: Path | str,\n        server: Path | str,\n        static: Path | str,\n        scripts: Path | str,\n        styles: Path | str,\n        type: t.Literal[\"ssr\"] | t.Literal[\"ssg\"] = \"ssr\",\n    ) -&gt; None:\n        self.pages = Path(pages) if isinstance(pages, str) else pages\n        self.server = Path(server) if isinstance(server, str) else server\n        self.static = Path(static) if isinstance(static, str) else static\n        self.scripts = Path(scripts) if isinstance(scripts, str) else scripts\n        self.styles = Path(styles) if isinstance(styles, str) else styles\n        self.type = type\n        self.http: SSR | SSG | None = None\n\n    def init(self) -&gt; None:\n        \"\"\"\n        Initialize the app by creating an SSR instance or an SSG instance\n\n        Arguments\n        ---------\n        None\n\n        Returns\n        -------\n        None\n        \"\"\"\n        if self.type == \"ssr\":\n            pages = {}\n            for page in self.pages.rglob(\"*.html\"):\n                if \"index.html\" in str(page.name):\n                    pages[\"/\"] = page\n                else:\n                    pages[\"/\" + str(page.relative_to(self.pages).as_posix()).replace(\".html\", \"\")] = page\n            server = {}\n            for file in self.server.rglob(\"*.py\"):\n                if \"index.py\" in str(file.name):\n                    server[\"/\"] = file\n                else:\n                    server[\"/\" + str(file.relative_to(self.server).as_posix()).replace(\".py\", \"\")] = file\n            static = {}\n            for file in self.static.rglob(\"*\"):\n                if file.is_file():\n                    static[\"/\" + str(file.relative_to(self.static).as_posix())] = file\n            scripts = {}\n            for file in self.scripts.rglob(\"*.js\"):\n                if file.is_file():\n                    scripts[\"/\" + str(file.relative_to(self.scripts).as_posix())] = file\n            styles = {}\n            for file in self.styles.rglob(\"*.css\"):\n                if file.is_file():\n                    styles[\"/\" + str(file.relative_to(self.styles).as_posix())] = file\n            self.http = SSR(\n                pages=pages,\n                server=server,\n                static=static,\n                scripts=scripts,\n                styles=styles,\n            )\n        elif self.type == \"ssg\":\n            pages = {}\n            for page in self.pages.rglob(\"*.html\"):\n                if \"index.html\" in str(page.name):\n                    pages[\"/\"] = page\n                else:\n                    pages[\"/\" + str(page.relative_to(self.pages).as_posix()).replace(\".html\", \"\")] = page\n            server = {}\n            for file in self.server.rglob(\"*.py\"):\n                if \"index.py\" in str(file.name):\n                    server[\"/\"] = file\n                else:\n                    server[\"/\" + str(file.relative_to(self.server).as_posix()).replace(\".py\", \"\")] = file\n            self.http = SSG(\n                pages=pages,\n                static=self.static,\n                scripts=self.scripts,\n                styles=self.styles,\n                server=server,\n            )\n\n    def run(\n        self,\n        host: str = \"localhost\",\n        port: int = 8000,\n        dev: bool = False,\n        reload_dirs: list[Path] = [],\n    ) -&gt; None:\n        \"\"\"\n        Run the app if it is an SSR instance\n\n        Arguments\n        ---------\n        host: str\n            Host of the server\n        port: int\n            Port of the server\n        dev: bool\n            Whether to run in development mode\n        reload_dirs: list[Path]\n            Directories to reload on change\n\n        Returns\n        -------\n        None\n        \"\"\"\n        if self.type == \"ssr\" and isinstance(self.http, SSR):\n            asyncio.get_event_loop().run_until_complete(\n                self.http.run(host=host, port=port, dev=dev, reload_dirs=reload_dirs)\n            )\n        else:\n            print(\"[#F43F5E bold]\u274c Run method is only available for SSR instances[/#F43F5E bold]\")\n            exit(0)\n\n    def build(self, dest: Path) -&gt; None:\n        \"\"\"\n        Build the app if it is an SSG instance\n\n        Arguments\n        ---------\n        dest: Path\n            Destination to build the app\n\n        Returns\n        -------\n        None\n        \"\"\"\n        if self.type == \"ssg\" and isinstance(self.http, SSG):\n            asyncio.get_event_loop().run_until_complete(self.http.build(dest=dest))\n        else:\n            print(\"[#F43F5E bold]\u274c Run method is only available for SSG instances[/#F43F5E bold]\")\n            exit(0)\n</code></pre>"},{"location":"api_reference/app/#vivid.app.App.build","title":"<code>build(dest)</code>","text":"<p>Build the app if it is an SSG instance</p> Arguments <p>dest: Path     Destination to build the app</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>vivid/app.py</code> <pre><code>def build(self, dest: Path) -&gt; None:\n    \"\"\"\n    Build the app if it is an SSG instance\n\n    Arguments\n    ---------\n    dest: Path\n        Destination to build the app\n\n    Returns\n    -------\n    None\n    \"\"\"\n    if self.type == \"ssg\" and isinstance(self.http, SSG):\n        asyncio.get_event_loop().run_until_complete(self.http.build(dest=dest))\n    else:\n        print(\"[#F43F5E bold]\u274c Run method is only available for SSG instances[/#F43F5E bold]\")\n        exit(0)\n</code></pre>"},{"location":"api_reference/app/#vivid.app.App.init","title":"<code>init()</code>","text":"<p>Initialize the app by creating an SSR instance or an SSG instance</p> Arguments <p>None</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>vivid/app.py</code> <pre><code>def init(self) -&gt; None:\n    \"\"\"\n    Initialize the app by creating an SSR instance or an SSG instance\n\n    Arguments\n    ---------\n    None\n\n    Returns\n    -------\n    None\n    \"\"\"\n    if self.type == \"ssr\":\n        pages = {}\n        for page in self.pages.rglob(\"*.html\"):\n            if \"index.html\" in str(page.name):\n                pages[\"/\"] = page\n            else:\n                pages[\"/\" + str(page.relative_to(self.pages).as_posix()).replace(\".html\", \"\")] = page\n        server = {}\n        for file in self.server.rglob(\"*.py\"):\n            if \"index.py\" in str(file.name):\n                server[\"/\"] = file\n            else:\n                server[\"/\" + str(file.relative_to(self.server).as_posix()).replace(\".py\", \"\")] = file\n        static = {}\n        for file in self.static.rglob(\"*\"):\n            if file.is_file():\n                static[\"/\" + str(file.relative_to(self.static).as_posix())] = file\n        scripts = {}\n        for file in self.scripts.rglob(\"*.js\"):\n            if file.is_file():\n                scripts[\"/\" + str(file.relative_to(self.scripts).as_posix())] = file\n        styles = {}\n        for file in self.styles.rglob(\"*.css\"):\n            if file.is_file():\n                styles[\"/\" + str(file.relative_to(self.styles).as_posix())] = file\n        self.http = SSR(\n            pages=pages,\n            server=server,\n            static=static,\n            scripts=scripts,\n            styles=styles,\n        )\n    elif self.type == \"ssg\":\n        pages = {}\n        for page in self.pages.rglob(\"*.html\"):\n            if \"index.html\" in str(page.name):\n                pages[\"/\"] = page\n            else:\n                pages[\"/\" + str(page.relative_to(self.pages).as_posix()).replace(\".html\", \"\")] = page\n        server = {}\n        for file in self.server.rglob(\"*.py\"):\n            if \"index.py\" in str(file.name):\n                server[\"/\"] = file\n            else:\n                server[\"/\" + str(file.relative_to(self.server).as_posix()).replace(\".py\", \"\")] = file\n        self.http = SSG(\n            pages=pages,\n            static=self.static,\n            scripts=self.scripts,\n            styles=self.styles,\n            server=server,\n        )\n</code></pre>"},{"location":"api_reference/app/#vivid.app.App.run","title":"<code>run(host='localhost', port=8000, dev=False, reload_dirs=[])</code>","text":"<p>Run the app if it is an SSR instance</p> Arguments <p>host: str     Host of the server port: int     Port of the server dev: bool     Whether to run in development mode reload_dirs: list[Path]     Directories to reload on change</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>vivid/app.py</code> <pre><code>def run(\n    self,\n    host: str = \"localhost\",\n    port: int = 8000,\n    dev: bool = False,\n    reload_dirs: list[Path] = [],\n) -&gt; None:\n    \"\"\"\n    Run the app if it is an SSR instance\n\n    Arguments\n    ---------\n    host: str\n        Host of the server\n    port: int\n        Port of the server\n    dev: bool\n        Whether to run in development mode\n    reload_dirs: list[Path]\n        Directories to reload on change\n\n    Returns\n    -------\n    None\n    \"\"\"\n    if self.type == \"ssr\" and isinstance(self.http, SSR):\n        asyncio.get_event_loop().run_until_complete(\n            self.http.run(host=host, port=port, dev=dev, reload_dirs=reload_dirs)\n        )\n    else:\n        print(\"[#F43F5E bold]\u274c Run method is only available for SSR instances[/#F43F5E bold]\")\n        exit(0)\n</code></pre>"},{"location":"api_reference/http/SSG/","title":"SSG","text":"<p>SSG class to create a static site generator</p> Arguments <p>pages: dict[str, Path]     Dictionary of routes and their corresponding pages static: Path     The static directory scripts: Path     The scripts directory styles: Path     The styles directory server: dict[str, Path]     Dictionary of routes and their corresponding server files</p> <p>Attributes:</p> Name Type Description <code>pages</code> <code>dict[str, Path]</code> <p>Dictionary of routes and their corresponding pages</p> <code>static</code> <code>Path</code> <p>The static directory</p> <code>scripts</code> <code>Path</code> <p>The scripts directory</p> <code>styles</code> <code>Path</code> <p>The styles directory</p> <code>server</code> <code>dict[str, Path]</code> <p>Dictionary of routes and their corresponding server files</p> Source code in <code>vivid/http.py</code> <pre><code>class SSG:\n    \"\"\"\n    SSG class to create a static site generator\n\n    Arguments\n    ---------\n    pages: dict[str, Path]\n        Dictionary of routes and their corresponding pages\n    static: Path\n        The static directory\n    scripts: Path\n        The scripts directory\n    styles: Path\n        The styles directory\n    server: dict[str, Path]\n        Dictionary of routes and their corresponding server files\n\n    Attributes\n    ----------\n    pages: dict[str, Path]\n        Dictionary of routes and their corresponding pages\n    static: Path\n        The static directory\n    scripts: Path\n        The scripts directory\n    styles: Path\n        The styles directory\n    server: dict[str, Path]\n        Dictionary of routes and their corresponding server files\n    \"\"\"\n\n    def __init__(\n        self,\n        pages: dict[str, Path],\n        static: Path,\n        scripts: Path,\n        styles: Path,\n        server: dict[str, Path],\n    ) -&gt; None:\n        self.pages = pages\n        self.static = static\n        self.scripts = scripts\n        self.styles = styles\n        self.server = server\n\n    async def get_templates_with_data(\n        self,\n    ) -&gt; AsyncGenerator[dict[str, tuple[Path, dict[str, t.Any] | None]], None]:\n        \"\"\"\n        Get the templates with their corresponding data\n\n        Arguments\n        ---------\n        None\n\n        Yields\n        ------\n        dict[str, tuple[Path, dict[str, typing.Any] | None]]\n            The templates with their corresponding data\n        \"\"\"\n        for page in self.pages:\n            if page == \"/404\" or page == \"/500\":\n                yield {page: (self.pages[page], None)}\n            else:\n                if self.server.get(page):\n                    mod = await load_server(self.server[page])\n                    if mod:\n                        data = await get_static_load_data(mod)\n                        if data:\n                            yield {page: (self.pages[page], data.body)}\n                        else:\n                            yield {page: (self.pages[page], None)}\n                    else:\n                        yield {page: (self.pages[page], None)}\n                else:\n                    yield {page: (self.pages[page], None)}\n\n    async def build(self, dest: Path) -&gt; None:\n        \"\"\"\n        Build the static site\n\n        Arguments\n        ---------\n        dest: Path\n            The destination directory\n\n        Returns\n        -------\n        None\n        \"\"\"\n        console.print(f\"[#8B5CF6 bold]\ud83d\udd28 Building to {dest.as_posix()}[/#8B5CF6 bold]\\n\")\n        async for pageAndData in self.get_templates_with_data():\n            for page, (template, data) in pageAndData.items():\n                body = return_template(template)\n                if body:\n                    if data:\n                        _body = render_template(body, data)\n                        if isinstance(_body, Exception):\n                            raise _body\n                        try:\n                            create_file_from_route(page, _body, dest)\n                            console.print(f\"[#0EA5E9]\u2705 {page} created[/#0EA5E9]\")\n                        except Exception:\n                            console.print_exception()\n                    else:\n                        try:\n                            console.print(f\"[#0EA5E9]\u2705 {page} created[/#0EA5E9]\")\n                            create_file_from_route(page, body, dest)\n                        except Exception:\n                            console.print_exception()\n        try:\n            console.print(\"[#8B5CF6 bold]\ud83d\udd28 Copying static files[/#8B5CF6 bold]\")\n            copy_static_files_to(self.static, dest / \"static\")\n        except Exception:\n            console.print_exception()\n        finally:\n            console.print(\"[#0EA5E9 bold]\u2705 Copied static[/#0EA5E9 bold]\")\n        try:\n            console.print(\"[#8B5CF6 bold]\ud83d\udd28 Copying scripts[/#8B5CF6 bold]\")\n            copy_static_files_to(self.scripts, dest / \"scripts\")\n        except Exception:\n            console.print_exception()\n        finally:\n            console.print(\"[#0EA5E9 bold]\u2705 Copied scripts[/#0EA5E9 bold]\")\n        try:\n            console.print(\"[#8B5CF6 bold]\ud83d\udd28 Copying styles[/#8B5CF6 bold]\")\n            copy_static_files_to(self.styles, dest / \"styles\")\n        except Exception:\n            console.print_exception()\n        finally:\n            console.print(\"[#0EA5E9 bold]\u2705 Copied styles[/#0EA5E9 bold]\")\n        console.print(\"[#8B5CF6 bold]\\n\u2705 Build complete\\n[/#8B5CF6 bold]\")\n        console.print(\"[#FACC15 bold]\u26a0 Make sure to fix the srcs and hrefs of scripts and stlyes[/#FACC15 bold]\")\n</code></pre>"},{"location":"api_reference/http/SSG/#vivid.http.SSG.build","title":"<code>build(dest)</code>  <code>async</code>","text":"<p>Build the static site</p> Arguments <p>dest: Path     The destination directory</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>vivid/http.py</code> <pre><code>async def build(self, dest: Path) -&gt; None:\n    \"\"\"\n    Build the static site\n\n    Arguments\n    ---------\n    dest: Path\n        The destination directory\n\n    Returns\n    -------\n    None\n    \"\"\"\n    console.print(f\"[#8B5CF6 bold]\ud83d\udd28 Building to {dest.as_posix()}[/#8B5CF6 bold]\\n\")\n    async for pageAndData in self.get_templates_with_data():\n        for page, (template, data) in pageAndData.items():\n            body = return_template(template)\n            if body:\n                if data:\n                    _body = render_template(body, data)\n                    if isinstance(_body, Exception):\n                        raise _body\n                    try:\n                        create_file_from_route(page, _body, dest)\n                        console.print(f\"[#0EA5E9]\u2705 {page} created[/#0EA5E9]\")\n                    except Exception:\n                        console.print_exception()\n                else:\n                    try:\n                        console.print(f\"[#0EA5E9]\u2705 {page} created[/#0EA5E9]\")\n                        create_file_from_route(page, body, dest)\n                    except Exception:\n                        console.print_exception()\n    try:\n        console.print(\"[#8B5CF6 bold]\ud83d\udd28 Copying static files[/#8B5CF6 bold]\")\n        copy_static_files_to(self.static, dest / \"static\")\n    except Exception:\n        console.print_exception()\n    finally:\n        console.print(\"[#0EA5E9 bold]\u2705 Copied static[/#0EA5E9 bold]\")\n    try:\n        console.print(\"[#8B5CF6 bold]\ud83d\udd28 Copying scripts[/#8B5CF6 bold]\")\n        copy_static_files_to(self.scripts, dest / \"scripts\")\n    except Exception:\n        console.print_exception()\n    finally:\n        console.print(\"[#0EA5E9 bold]\u2705 Copied scripts[/#0EA5E9 bold]\")\n    try:\n        console.print(\"[#8B5CF6 bold]\ud83d\udd28 Copying styles[/#8B5CF6 bold]\")\n        copy_static_files_to(self.styles, dest / \"styles\")\n    except Exception:\n        console.print_exception()\n    finally:\n        console.print(\"[#0EA5E9 bold]\u2705 Copied styles[/#0EA5E9 bold]\")\n    console.print(\"[#8B5CF6 bold]\\n\u2705 Build complete\\n[/#8B5CF6 bold]\")\n    console.print(\"[#FACC15 bold]\u26a0 Make sure to fix the srcs and hrefs of scripts and stlyes[/#FACC15 bold]\")\n</code></pre>"},{"location":"api_reference/http/SSG/#vivid.http.SSG.get_templates_with_data","title":"<code>get_templates_with_data()</code>  <code>async</code>","text":"<p>Get the templates with their corresponding data</p> Arguments <p>None</p> <p>Yields:</p> Type Description <code>dict[str, tuple[Path, dict[str, Any] | None]]</code> <p>The templates with their corresponding data</p> Source code in <code>vivid/http.py</code> <pre><code>async def get_templates_with_data(\n    self,\n) -&gt; AsyncGenerator[dict[str, tuple[Path, dict[str, t.Any] | None]], None]:\n    \"\"\"\n    Get the templates with their corresponding data\n\n    Arguments\n    ---------\n    None\n\n    Yields\n    ------\n    dict[str, tuple[Path, dict[str, typing.Any] | None]]\n        The templates with their corresponding data\n    \"\"\"\n    for page in self.pages:\n        if page == \"/404\" or page == \"/500\":\n            yield {page: (self.pages[page], None)}\n        else:\n            if self.server.get(page):\n                mod = await load_server(self.server[page])\n                if mod:\n                    data = await get_static_load_data(mod)\n                    if data:\n                        yield {page: (self.pages[page], data.body)}\n                    else:\n                        yield {page: (self.pages[page], None)}\n                else:\n                    yield {page: (self.pages[page], None)}\n            else:\n                yield {page: (self.pages[page], None)}\n</code></pre>"},{"location":"api_reference/http/SSR/","title":"SSR","text":"<p>Http class to create a vivid app</p> Arguments <p>pages: dict[str, Path]     Dictionary of routes and their corresponding pages server: dict[str, Path]     Dictionary of routes and their corresponding server files static: dict[str, Path]     Dictionary of routes and their corresponding static files scripts: dict[str, Path]     Dictionary of routes and their corresponding scripts styles: dict[str, Path]     Dictionary of routes and their corresponding styles</p> <p>Attributes:</p> Name Type Description <code>pages</code> <code>dict[str, Path]</code> <p>Dictionary of routes and their corresponding pages</p> <code>server</code> <code>dict[str, Path]</code> <p>Dictionary of routes and their corresponding server files</p> <code>static</code> <code>dict[str, Path]</code> <p>Dictionary of routes and their corresponding static files</p> <code>scripts</code> <code>dict[str, Path]</code> <p>Dictionary of routes and their corresponding scripts</p> <code>styles</code> <code>dict[str, Path]</code> <p>Dictionary of routes and their corresponding styles</p> Source code in <code>vivid/http.py</code> <pre><code>class SSR:\n    \"\"\"\n    Http class to create a vivid app\n\n    Arguments\n    ---------\n    pages: dict[str, Path]\n        Dictionary of routes and their corresponding pages\n    server: dict[str, Path]\n        Dictionary of routes and their corresponding server files\n    static: dict[str, Path]\n        Dictionary of routes and their corresponding static files\n    scripts: dict[str, Path]\n        Dictionary of routes and their corresponding scripts\n    styles: dict[str, Path]\n        Dictionary of routes and their corresponding styles\n\n    Attributes\n    ----------\n    pages: dict[str, Path]\n        Dictionary of routes and their corresponding pages\n    server: dict[str, Path]\n        Dictionary of routes and their corresponding server files\n    static: dict[str, Path]\n        Dictionary of routes and their corresponding static files\n    scripts: dict[str, Path]\n        Dictionary of routes and their corresponding scripts\n    styles: dict[str, Path]\n        Dictionary of routes and their corresponding styles\n    \"\"\"\n\n    def __init__(\n        self,\n        pages: dict[str, Path],\n        server: dict[str, Path],\n        static: dict[str, Path],\n        scripts: dict[str, Path],\n        styles: dict[str, Path],\n    ) -&gt; None:\n        self.pages = pages\n        self.server = server\n        self.static = static\n        self.scripts = scripts\n        self.styles = styles\n\n    async def __call__(\n        self, scope: dict[str, t.Any], receive: Callable[..., t.Any], send: Callable[..., t.Any]\n    ) -&gt; None:\n        \"\"\"\n        The main function of the app\n\n        Arguments\n        ---------\n        scope: dict[str, typing.Any]\n            The scope of the request\n        receive: collections.abc.Callable[..., t.Any]\n            The receive function\n        send: collections.abc.Callable[..., t.Any]\n            The send function\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        Exception\n            If an error occurs\n\n        Notes\n        -----\n        This function is called by uvicorn\n        \"\"\"\n        assert scope[\"type\"] == \"http\"\n        console.print(\n            f\"[#0EA5E9]\ud83d\udd17 {scope['client'][0]}:{scope['client'][1]} {scope['method']} {scope['path']}[/#0EA5E9]\",\n        )\n        route: str = scope[\"path\"]\n        try:\n            if route.startswith(\"/static\"):\n                body = self.serve_static(route)\n                if body:\n                    await send_response(\n                        200,\n                        body[0],\n                        [[b\"content-type\", body[1].encode() if body else b\"text/html\"]],\n                        send,\n                    )\n                    vlog(\"success\", scope, 200)\n                else:\n                    await self.render_not_found(send)\n                    vlog(\"fail\", scope, 404)\n            elif route == \"/favicon.ico\":\n                favicon = self.serve_static(\"/static/favicon.ico\")\n                if favicon:\n                    await send_response(\n                        200,\n                        favicon[0],\n                        [\n                            [\n                                b\"content-type\",\n                                favicon[1].encode() if favicon else b\"text/html\",\n                            ]\n                        ],\n                        send,\n                    )\n                    vlog(\"success\", scope, 200)\n                else:\n                    await self.render_not_found(send)\n                    vlog(\"fail\", scope, 404)\n            elif route.startswith(\"/scripts\"):\n                body = await self.serve_script(route)  # type: ignore[assignment]\n                if body:\n                    await send_response(200, body, [[b\"content-type\", b\"text/javascript\"]], send)\n                    vlog(\"success\", scope, 200)\n                else:\n                    await self.render_not_found(send)\n                    vlog(\"fail\", scope, 404)\n            elif route.startswith(\"/styles\"):\n                body = await self.serve_styles(route)  # type: ignore[assignment]\n                if body:\n                    await send_response(200, body, [[b\"content-type\", b\"text/css\"]], send)\n                    vlog(\"success\", scope, 200)\n                else:\n                    await self.render_not_found(send)\n                    vlog(\"fail\", scope, 404)\n            else:\n                try:\n                    body = return_template(self.pages[route])  # type: ignore[assignment]\n                    status = 200\n                    headers: list[list[str | bytes]] = [[b\"content-type\", b\"text/html\"]]\n                    if self.server.get(route):\n                        mod = await load_server(self.server[route])\n                        if mod:\n                            data = await get_load_data(mod, await receive())\n                            if data and body and isinstance(body, str):\n                                body = render_template(body, data.body)\n                                if isinstance(body, Exception):\n                                    await self.render_error(send)\n                                    raise body\n                                status = data.status\n                                headers: list[list[str | bytes]] = data.headers  # type: ignore[no-redef]\n                            else:\n                                await self.render_error(send)\n                                vlog(\"fail\", scope, 500)\n                        else:\n                            await self.render_error(send)\n                            vlog(\"fail\", scope, 500)\n                    if body:\n                        await send_response(status, body, headers, send)\n                        vlog(\"success\", scope, status)\n                    else:\n                        await self.render_not_found(send)\n                        vlog(\"fail\", scope, 404)\n                except KeyError:\n                    await self.render_not_found(send)\n                    vlog(\"fail\", scope, 404)\n        except Exception:\n            await self.render_error(send)\n            vlog(\"fail\", scope, 500)\n            console.print_exception()\n\n    async def run(\n        self,\n        host: str = \"localhost\",\n        port: int = 8000,\n        dev: bool = False,\n        reload_dirs: list[Path] = [],\n    ) -&gt; None:\n        \"\"\"\n        Run the app\n\n        Arguments\n        ---------\n        host: str\n            The host of the app\n        port: int\n            The port of the app\n        dev: bool\n            Whether to run in development mode\n        reload_dirs: list[Path]\n            The directories to reload\n\n        Returns\n        -------\n        None\n        \"\"\"\n        config = uvicorn.Config(\n            self,\n            host=host,\n            port=port,\n            reload=dev,\n            log_level=\"critical\",\n            reload_dirs=[path.as_posix() for path in reload_dirs],\n        )\n        server = uvicorn.Server(config)\n        try:\n            console.print(\n                f\"[#8B5CF6 bold]\u2705 Server running at http://{host}:{port}[/#8B5CF6 bold]\",\n                (f\"[#D97706 bold]\ud83d\ude80 dev mode: {dev}[/#D97706 bold]\\n\"),\n            )\n            await server.serve()\n        except KeyboardInterrupt:\n            console.print(\"[#8B5CF6 bold]\\n\ud83d\uded1 Server stopped[/#8B5CF6 bold]\\n\")\n        except Exception as e:\n            console.print(f\"[#FF0000 bold]\ud83d\udea8 {e}[/#FF0000 bold]\\n\")\n\n    def serve_static(self, route: str) -&gt; tuple[bytes, str] | tuple[bytes, t.Literal[\"text/plain\"]] | None:\n        \"\"\"\n        Serve the static files\n\n        Arguments\n        ---------\n        route: str\n            The route to the static file\n\n        Returns\n        -------\n        tuple[bytes, str] | tuple[bytes, t.Literal[\"text/plain\"]] | None\n            The static file or None\n        \"\"\"\n        try:\n            with open(self.static[route.replace(\"/static\", \"\")], \"rb\") as file:\n                mime_type, _ = mimetypes.guess_type(self.static[route.replace(\"/static\", \"\")])\n                if mime_type:\n                    return file.read(), mime_type\n                return file.read(), \"text/plain\"\n        except (FileNotFoundError, KeyError):\n            return None\n\n    async def render_not_found(self, send: Callable[..., t.Any]) -&gt; None:\n        \"\"\"\n        Render the 404 page\n\n        Arguments\n        ---------\n        send: collections.abc.Callable[..., t.Any]\n            The send function\n\n        Returns\n        -------\n        None\n        \"\"\"\n        try:\n            body = return_template(self.pages[\"/404\"])\n            await send_response(\n                404,\n                body if body else \"404 Not Found\",\n                [[b\"content-type\", b\"text/html\"]],\n                send,\n            )\n        except KeyError:\n            await send_response(404, \"404 Not Found\", [[b\"content-type\", b\"text/html\"]], send)\n\n    async def render_error(self, send: Callable[..., t.Any]) -&gt; None:\n        \"\"\"\n        Render the 500 page\n\n        Arguments\n        ---------\n        send: collections.abc.Callable[..., t.Any]\n            The send function\n\n        Returns\n        -------\n        None\n        \"\"\"\n        try:\n            body = return_template(self.pages.get(\"/500\") or self.pages[\"/500\"])\n            await send_response(\n                500,\n                body if body else \"500 Internal Server Error\",\n                [[b\"content-type\", b\"text/html\"]],\n                send,\n            )\n        except KeyError:\n            await send_response(\n                500,\n                \"500 Internal Server Error\",\n                [[b\"content-type\", b\"text/html\"]],\n                send,\n            )\n\n    async def serve_script(self, route: str) -&gt; str | None:\n        \"\"\"\n        Serve the scripts\n\n        Arguments\n        ---------\n        route: str\n            The route to the script\n\n        Returns\n        -------\n        str | None\n            The script or None\n        \"\"\"\n        try:\n            with open(self.scripts[route.replace(\"/scripts\", \"\")], \"r\") as file:\n                return file.read()\n        except (FileNotFoundError, KeyError):\n            return None\n\n    async def serve_styles(self, route: str) -&gt; str | None:\n        \"\"\"\n        Serve the styles\n\n        Arguments\n        ---------\n        route: str\n            The route to the style\n\n        Returns\n        -------\n        str | None\n            The style or None\n        \"\"\"\n        try:\n            with open(self.styles[route.replace(\"/styles\", \"\")], \"r\") as file:\n                return file.read()\n        except (FileNotFoundError, KeyError):\n            return None\n</code></pre>"},{"location":"api_reference/http/SSR/#vivid.http.SSR.__call__","title":"<code>__call__(scope, receive, send)</code>  <code>async</code>","text":"<p>The main function of the app</p> Arguments <p>scope: dict[str, typing.Any]     The scope of the request receive: collections.abc.Callable[..., t.Any]     The receive function send: collections.abc.Callable[..., t.Any]     The send function</p> <p>Returns:</p> Type Description <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If an error occurs</p> Notes <p>This function is called by uvicorn</p> Source code in <code>vivid/http.py</code> <pre><code>async def __call__(\n    self, scope: dict[str, t.Any], receive: Callable[..., t.Any], send: Callable[..., t.Any]\n) -&gt; None:\n    \"\"\"\n    The main function of the app\n\n    Arguments\n    ---------\n    scope: dict[str, typing.Any]\n        The scope of the request\n    receive: collections.abc.Callable[..., t.Any]\n        The receive function\n    send: collections.abc.Callable[..., t.Any]\n        The send function\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    Exception\n        If an error occurs\n\n    Notes\n    -----\n    This function is called by uvicorn\n    \"\"\"\n    assert scope[\"type\"] == \"http\"\n    console.print(\n        f\"[#0EA5E9]\ud83d\udd17 {scope['client'][0]}:{scope['client'][1]} {scope['method']} {scope['path']}[/#0EA5E9]\",\n    )\n    route: str = scope[\"path\"]\n    try:\n        if route.startswith(\"/static\"):\n            body = self.serve_static(route)\n            if body:\n                await send_response(\n                    200,\n                    body[0],\n                    [[b\"content-type\", body[1].encode() if body else b\"text/html\"]],\n                    send,\n                )\n                vlog(\"success\", scope, 200)\n            else:\n                await self.render_not_found(send)\n                vlog(\"fail\", scope, 404)\n        elif route == \"/favicon.ico\":\n            favicon = self.serve_static(\"/static/favicon.ico\")\n            if favicon:\n                await send_response(\n                    200,\n                    favicon[0],\n                    [\n                        [\n                            b\"content-type\",\n                            favicon[1].encode() if favicon else b\"text/html\",\n                        ]\n                    ],\n                    send,\n                )\n                vlog(\"success\", scope, 200)\n            else:\n                await self.render_not_found(send)\n                vlog(\"fail\", scope, 404)\n        elif route.startswith(\"/scripts\"):\n            body = await self.serve_script(route)  # type: ignore[assignment]\n            if body:\n                await send_response(200, body, [[b\"content-type\", b\"text/javascript\"]], send)\n                vlog(\"success\", scope, 200)\n            else:\n                await self.render_not_found(send)\n                vlog(\"fail\", scope, 404)\n        elif route.startswith(\"/styles\"):\n            body = await self.serve_styles(route)  # type: ignore[assignment]\n            if body:\n                await send_response(200, body, [[b\"content-type\", b\"text/css\"]], send)\n                vlog(\"success\", scope, 200)\n            else:\n                await self.render_not_found(send)\n                vlog(\"fail\", scope, 404)\n        else:\n            try:\n                body = return_template(self.pages[route])  # type: ignore[assignment]\n                status = 200\n                headers: list[list[str | bytes]] = [[b\"content-type\", b\"text/html\"]]\n                if self.server.get(route):\n                    mod = await load_server(self.server[route])\n                    if mod:\n                        data = await get_load_data(mod, await receive())\n                        if data and body and isinstance(body, str):\n                            body = render_template(body, data.body)\n                            if isinstance(body, Exception):\n                                await self.render_error(send)\n                                raise body\n                            status = data.status\n                            headers: list[list[str | bytes]] = data.headers  # type: ignore[no-redef]\n                        else:\n                            await self.render_error(send)\n                            vlog(\"fail\", scope, 500)\n                    else:\n                        await self.render_error(send)\n                        vlog(\"fail\", scope, 500)\n                if body:\n                    await send_response(status, body, headers, send)\n                    vlog(\"success\", scope, status)\n                else:\n                    await self.render_not_found(send)\n                    vlog(\"fail\", scope, 404)\n            except KeyError:\n                await self.render_not_found(send)\n                vlog(\"fail\", scope, 404)\n    except Exception:\n        await self.render_error(send)\n        vlog(\"fail\", scope, 500)\n        console.print_exception()\n</code></pre>"},{"location":"api_reference/http/SSR/#vivid.http.SSR.render_error","title":"<code>render_error(send)</code>  <code>async</code>","text":"<p>Render the 500 page</p> Arguments <p>send: collections.abc.Callable[..., t.Any]     The send function</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>vivid/http.py</code> <pre><code>async def render_error(self, send: Callable[..., t.Any]) -&gt; None:\n    \"\"\"\n    Render the 500 page\n\n    Arguments\n    ---------\n    send: collections.abc.Callable[..., t.Any]\n        The send function\n\n    Returns\n    -------\n    None\n    \"\"\"\n    try:\n        body = return_template(self.pages.get(\"/500\") or self.pages[\"/500\"])\n        await send_response(\n            500,\n            body if body else \"500 Internal Server Error\",\n            [[b\"content-type\", b\"text/html\"]],\n            send,\n        )\n    except KeyError:\n        await send_response(\n            500,\n            \"500 Internal Server Error\",\n            [[b\"content-type\", b\"text/html\"]],\n            send,\n        )\n</code></pre>"},{"location":"api_reference/http/SSR/#vivid.http.SSR.render_not_found","title":"<code>render_not_found(send)</code>  <code>async</code>","text":"<p>Render the 404 page</p> Arguments <p>send: collections.abc.Callable[..., t.Any]     The send function</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>vivid/http.py</code> <pre><code>async def render_not_found(self, send: Callable[..., t.Any]) -&gt; None:\n    \"\"\"\n    Render the 404 page\n\n    Arguments\n    ---------\n    send: collections.abc.Callable[..., t.Any]\n        The send function\n\n    Returns\n    -------\n    None\n    \"\"\"\n    try:\n        body = return_template(self.pages[\"/404\"])\n        await send_response(\n            404,\n            body if body else \"404 Not Found\",\n            [[b\"content-type\", b\"text/html\"]],\n            send,\n        )\n    except KeyError:\n        await send_response(404, \"404 Not Found\", [[b\"content-type\", b\"text/html\"]], send)\n</code></pre>"},{"location":"api_reference/http/SSR/#vivid.http.SSR.run","title":"<code>run(host='localhost', port=8000, dev=False, reload_dirs=[])</code>  <code>async</code>","text":"<p>Run the app</p> Arguments <p>host: str     The host of the app port: int     The port of the app dev: bool     Whether to run in development mode reload_dirs: list[Path]     The directories to reload</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>vivid/http.py</code> <pre><code>async def run(\n    self,\n    host: str = \"localhost\",\n    port: int = 8000,\n    dev: bool = False,\n    reload_dirs: list[Path] = [],\n) -&gt; None:\n    \"\"\"\n    Run the app\n\n    Arguments\n    ---------\n    host: str\n        The host of the app\n    port: int\n        The port of the app\n    dev: bool\n        Whether to run in development mode\n    reload_dirs: list[Path]\n        The directories to reload\n\n    Returns\n    -------\n    None\n    \"\"\"\n    config = uvicorn.Config(\n        self,\n        host=host,\n        port=port,\n        reload=dev,\n        log_level=\"critical\",\n        reload_dirs=[path.as_posix() for path in reload_dirs],\n    )\n    server = uvicorn.Server(config)\n    try:\n        console.print(\n            f\"[#8B5CF6 bold]\u2705 Server running at http://{host}:{port}[/#8B5CF6 bold]\",\n            (f\"[#D97706 bold]\ud83d\ude80 dev mode: {dev}[/#D97706 bold]\\n\"),\n        )\n        await server.serve()\n    except KeyboardInterrupt:\n        console.print(\"[#8B5CF6 bold]\\n\ud83d\uded1 Server stopped[/#8B5CF6 bold]\\n\")\n    except Exception as e:\n        console.print(f\"[#FF0000 bold]\ud83d\udea8 {e}[/#FF0000 bold]\\n\")\n</code></pre>"},{"location":"api_reference/http/SSR/#vivid.http.SSR.serve_script","title":"<code>serve_script(route)</code>  <code>async</code>","text":"<p>Serve the scripts</p> Arguments <p>route: str     The route to the script</p> <p>Returns:</p> Type Description <code>str | None</code> <p>The script or None</p> Source code in <code>vivid/http.py</code> <pre><code>async def serve_script(self, route: str) -&gt; str | None:\n    \"\"\"\n    Serve the scripts\n\n    Arguments\n    ---------\n    route: str\n        The route to the script\n\n    Returns\n    -------\n    str | None\n        The script or None\n    \"\"\"\n    try:\n        with open(self.scripts[route.replace(\"/scripts\", \"\")], \"r\") as file:\n            return file.read()\n    except (FileNotFoundError, KeyError):\n        return None\n</code></pre>"},{"location":"api_reference/http/SSR/#vivid.http.SSR.serve_static","title":"<code>serve_static(route)</code>","text":"<p>Serve the static files</p> Arguments <p>route: str     The route to the static file</p> <p>Returns:</p> Type Description <code>tuple[bytes, str] | tuple[bytes, Literal['text/plain']] | None</code> <p>The static file or None</p> Source code in <code>vivid/http.py</code> <pre><code>def serve_static(self, route: str) -&gt; tuple[bytes, str] | tuple[bytes, t.Literal[\"text/plain\"]] | None:\n    \"\"\"\n    Serve the static files\n\n    Arguments\n    ---------\n    route: str\n        The route to the static file\n\n    Returns\n    -------\n    tuple[bytes, str] | tuple[bytes, t.Literal[\"text/plain\"]] | None\n        The static file or None\n    \"\"\"\n    try:\n        with open(self.static[route.replace(\"/static\", \"\")], \"rb\") as file:\n            mime_type, _ = mimetypes.guess_type(self.static[route.replace(\"/static\", \"\")])\n            if mime_type:\n                return file.read(), mime_type\n            return file.read(), \"text/plain\"\n    except (FileNotFoundError, KeyError):\n        return None\n</code></pre>"},{"location":"api_reference/http/SSR/#vivid.http.SSR.serve_styles","title":"<code>serve_styles(route)</code>  <code>async</code>","text":"<p>Serve the styles</p> Arguments <p>route: str     The route to the style</p> <p>Returns:</p> Type Description <code>str | None</code> <p>The style or None</p> Source code in <code>vivid/http.py</code> <pre><code>async def serve_styles(self, route: str) -&gt; str | None:\n    \"\"\"\n    Serve the styles\n\n    Arguments\n    ---------\n    route: str\n        The route to the style\n\n    Returns\n    -------\n    str | None\n        The style or None\n    \"\"\"\n    try:\n        with open(self.styles[route.replace(\"/styles\", \"\")], \"r\") as file:\n            return file.read()\n    except (FileNotFoundError, KeyError):\n        return None\n</code></pre>"},{"location":"guides/basic/","title":"Basic usage of vivid","text":"<p>Note</p> <p>Work in progress, contribution is welcome.</p>"}]}